
CREATE OR REPLACE PROCEDURE POS.PRO_ITEM_CONFIG_SAVE (
   P_ENC_ITEM_ID    IN     VARCHAR2,
   P_ITEM_ID        IN     VARCHAR2,
   P_PRODUCT_ID     IN     VARCHAR2,
   P_QUANTITY       IN     VARCHAR2,
   P_UNIT_ID        IN     VARCHAR2,
   P_UPDATE_BY      IN     VARCHAR2,
   P_UPDATE_DATE       OUT VARCHAR2,
   P_MESSAGE           OUT VARCHAR2,
   P_MESSAGE_CODE      OUT VARCHAR2)
AS
   V_COUNT                NUMBER;
   V_ITEM_ID              NUMBER;
   V_QNT_FRACTION_VALUE   NUMBER;
   V_SMALL_UNIT           NUMBER;
BEGIN
   BEGIN
      IF P_PRODUCT_ID IS NULL
      THEN
         P_MESSAGE := 'PRODUCT IS REQUIRED !!';
         P_MESSAGE_CODE := '0000';
         RETURN;
      END IF;

      IF P_QUANTITY IS NULL
      THEN
         P_MESSAGE := 'QUANTITY IS REQUIRED !!';
         P_MESSAGE_CODE := '0000';
         RETURN;
      END IF;

      IF P_UNIT_ID IS NULL
      THEN
         P_MESSAGE := 'UNIT IS REQUIRED !!';
         P_MESSAGE_CODE := '0000';
         RETURN;
      END IF;

      BEGIN
         SELECT SMALL_UNIT
           INTO V_SMALL_UNIT
           FROM L_UNIT
          WHERE UNIT_ID = P_UNIT_ID;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            P_MESSAGE := 'UNIT DETAILS NOT FOUND !!';
            P_MESSAGE_CODE := '0000';
            ROLLBACK;
            RETURN;
      END;


      V_QNT_FRACTION_VALUE := P_QUANTITY * V_SMALL_UNIT;



      IF P_ENC_ITEM_ID IS NOT NULL
      THEN
         BEGIN
            UPDATE ITEM_CONFIG
               SET QUANTITY = P_QUANTITY,
                   UNIT_ID = P_UNIT_ID,
                   UPDATE_BY = P_UPDATE_BY,
                   UPDATE_DATE = SYSDATE,
                   QNT_FRACTION_VALUE = V_QNT_FRACTION_VALUE
             WHERE ITEM_ID = P_ENC_ITEM_ID AND PRODUCT_ID = P_PRODUCT_ID;

            P_MESSAGE := 'ITEM CONFIGURATION UPDATE SUCCESSFULL';
            P_MESSAGE_CODE := '1111';
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               P_MESSAGE :=
                  SQLERRM || ' ERROR UPDATING ITEM CONFIGURATION !!!';
               P_MESSAGE_CODE := '0000';
               ROLLBACK;
               RETURN;
         END;
      ELSE
         SELECT COUNT (ITEM_ID)
           INTO V_COUNT
           FROM ITEM_CONFIG
          WHERE ITEM_ID = P_ITEM_ID AND PRODUCT_ID = P_PRODUCT_ID;


         IF V_COUNT > 0
         THEN
            BEGIN
               UPDATE ITEM_CONFIG
                  SET QUANTITY = P_QUANTITY,
                      UNIT_ID = P_UNIT_ID,
                      UPDATE_BY = P_UPDATE_BY,
                      UPDATE_DATE = SYSDATE,
                      QNT_FRACTION_VALUE = V_QNT_FRACTION_VALUE
                WHERE ITEM_ID = P_ITEM_ID AND PRODUCT_ID = P_PRODUCT_ID;

               P_MESSAGE := 'ITEM CONFIGURATION UPDATE SUCCESSFULL';
               P_MESSAGE_CODE := '1111';
               RETURN;
            EXCEPTION
               WHEN OTHERS
               THEN
                  P_MESSAGE :=
                     SQLERRM || ' ERROR UPDATING ITEM CONFIGURATION !!!';
                  P_MESSAGE_CODE := '0000';
                  ROLLBACK;
                  RETURN;
            END;
         ELSE
            BEGIN
               INSERT INTO ITEM_CONFIG (ITEM_ID,
                                        PRODUCT_ID,
                                        QUANTITY,
                                        UNIT_ID,
                                        UPDATE_BY,
                                        UPDATE_DATE,
                                        QNT_FRACTION_VALUE)
                    VALUES (P_ITEM_ID,
                            P_PRODUCT_ID,
                            P_QUANTITY,
                            P_UNIT_ID,
                            P_UPDATE_BY,
                            SYSDATE,
                            V_QNT_FRACTION_VALUE);

               P_MESSAGE := 'ITEM CONFIGURATION SAVE SUCCESSFULL';
               P_MESSAGE_CODE := '1111';
               RETURN;
            EXCEPTION
               WHEN OTHERS
               THEN
                  P_MESSAGE :=
                     SQLERRM || ' ERROR SAVING ITEM CONFIGURATION !!!';
                  P_MESSAGE_CODE := '0000';
                  ROLLBACK;
                  RETURN;
            END;
         END IF;
      END IF;
   END;
END;
/















DATE   29.09.2019

/* Formatted on 9/29/2019 11:44:31 PM (QP5 v5.149.1003.31008) */
CREATE OR REPLACE PROCEDURE POS.PRO_ITEM_ORDER_INGRE_SAVE (
   P_ORDER_ID       IN     VARCHAR2,
   P_UPDATE_BY      IN     VARCHAR2,
   P_MESSAGE           OUT VARCHAR2,
   P_MESSAGE_CODE      OUT VARCHAR2)
AS
   V_COUNT   NUMBER;

   CURSOR CUR_ITEM_ORDER_INGRE
   IS
      SELECT OM.ORDER_ID,
             OM.ORDER_DATE,
             IO.ITEM_ORDER_ID,
             IO.ITEM_ID,
             IO.QUANTITY,
             IC.PRODUCT_ID,
             IC.UNIT_ID,
             IC.QNT_FRACTION_VALUE * IO.QUANTITY SMALL_UNIT
        FROM ORDER_MANAGEMENT OM, ITEM_ORDER IO, ITEM_CONFIG IC
       WHERE     OM.ORDER_ID = IO.ORDER_ID
             AND IO.ITEM_ID = IC.ITEM_ID
             AND OM.ORDER_ID = P_ORDER_ID;

   MVAR      CUR_ITEM_ORDER_INGRE%ROWTYPE;
BEGIN
   IF P_ORDER_ID IS NOT NULL
   THEN
      BEGIN
         DELETE ITEM_ORDER_INGREDIENTS
          WHERE ORDER_ID = P_ORDER_ID;
      END;

      BEGIN
         OPEN CUR_ITEM_ORDER_INGRE;

         LOOP
            FETCH CUR_ITEM_ORDER_INGRE INTO MVAR;

            EXIT WHEN CUR_ITEM_ORDER_INGRE%NOTFOUND;

            BEGIN
               INSERT INTO ITEM_ORDER_INGREDIENTS (ITEM_ORDER_ID,
                                                   ORDER_ID,
                                                   ITEM_ID,
                                                   ORDER_DATE,
                                                   PRODUCT_ID,
                                                   UNIT_ID,
                                                   SMALL_UNIT,
                                                   UPDATE_BY,
                                                   UPDATE_DATE)
                    VALUES (MVAR.ITEM_ORDER_ID,
                            MVAR.ORDER_ID,
                            MVAR.ITEM_ID,
                            MVAR.ORDER_DATE,
                            MVAR.PRODUCT_ID,
                            MVAR.UNIT_ID,
                            MVAR.SMALL_UNIT,
                            P_UPDATE_BY,
                            SYSDATE);
            EXCEPTION
               WHEN OTHERS
               THEN
                  P_MESSAGE := 'ERROR IN  ITEM_ORDER_INGREDIENTS !!';
                  P_MESSAGE_CODE := '0000';
                  ROLLBACK;
                  RETURN;
            END;
         END LOOP;

         CLOSE CUR_ITEM_ORDER_INGRE;
      EXCEPTION
         WHEN OTHERS
         THEN
            P_MESSAGE := 'ERROR IN  ITEM_ORDER_INGREDIENTS !!';
            P_MESSAGE_CODE := '0000';
            ROLLBACK;
            RETURN;
      END;


      P_MESSAGE_CODE := '1111';
   END IF;
END;
/



/* Formatted on 9/29/2019 11:45:59 PM (QP5 v5.149.1003.31008) */
CREATE OR REPLACE PROCEDURE POS.PRO_ORDER_FINALIZE (
   P_ORDER_ID                    VARCHAR2,
   P_PAYABLE_AMOUNT              VARCHAR2,
   P_NET_PAY_AMOUNT              VARCHAR2,
   P_RECEIVED_AMOUNT             VARCHAR2,
   P_CHANGE_AMOUNT               VARCHAR2,
   P_CASH_PAY_AMOUNT             VARCHAR2,
   P_CARD_PAY_AMOUNT             VARCHAR2,
   P_BKASH_PAYMENT_AMOUNT        VARCHAR2,
   P_BKASH_TRAN_NO               VARCHAR2,
   P_DISCOUNT_AMOUNT             VARCHAR2,
   P_DISCOUNT_REFERENCE_BY       VARCHAR2,
   P_BILL_PRINT_YN               VARCHAR2,
   P_UPDATE_BY                   VARCHAR2,
   P_MESSAGE                 OUT VARCHAR2,
   P_MESSAGE_CODE            OUT VARCHAR2)
AS
   V_COUNT          NUMBER;
   V_MESSAGE        VARCHAR2 (5000);
   V_MESSAGE_CODE   VARCHAR2 (5000);
BEGIN
   IF P_ORDER_ID IS NOT NULL
   THEN
      SELECT COUNT (ORDER_ID)
        INTO V_COUNT
        FROM ORDER_MANAGEMENT
       WHERE ORDER_ID = P_ORDER_ID;


      IF V_COUNT > 0
      THEN
         IF P_BILL_PRINT_YN IS NOT NULL AND P_BILL_PRINT_YN = 'Y'
         THEN
            BEGIN
               UPDATE ORDER_MANAGEMENT
                  SET PAYABLE_AMOUNT = NVL (P_PAYABLE_AMOUNT, 0),
                      NET_PAY_AMOUNT = NVL (P_NET_PAY_AMOUNT, 0),
                      DISCOUNT_AMOUNT = NVL (P_DISCOUNT_AMOUNT, 0),
                      DISCOUNT_REFERENCE_BY = P_DISCOUNT_REFERENCE_BY,
                      BILL_PRINT_YN = P_BILL_PRINT_YN,
                      UPDATE_BY = P_UPDATE_BY,
                      UPDATE_DATE = SYSDATE
                WHERE ORDER_ID = P_ORDER_ID;

               P_MESSAGE_CODE := '1111';
               P_MESSAGE := 'BILL CREATE SUCCESSFULLY   !!!';
            EXCEPTION
               WHEN OTHERS
               THEN
                  P_MESSAGE := ' ERROR IN BILL CREATION !!!';
                  P_MESSAGE_CODE := '0000';
                  ROLLBACK;
                  RETURN;
            END;
         ELSE
            BEGIN
               UPDATE ORDER_MANAGEMENT
                  SET PAYABLE_AMOUNT = NVL (P_PAYABLE_AMOUNT, 0),
                      NET_PAY_AMOUNT = NVL (P_NET_PAY_AMOUNT, 0),
                      RECEIVED_AMOUNT = NVL (P_RECEIVED_AMOUNT, 0),
                      CHANGE_AMOUNT = NVL (P_CHANGE_AMOUNT, 0),
                      CASH_PAY_AMOUNT = NVL (P_CASH_PAY_AMOUNT, 0),
                      CARD_PAY_AMOUNT = NVL (P_CARD_PAY_AMOUNT, 0),
                      BKASH_PAYMENT_AMOUNT = NVL (P_BKASH_PAYMENT_AMOUNT, 0),
                      BKASH_TRAN_NO = P_BKASH_TRAN_NO,
                      DISCOUNT_AMOUNT = NVL (P_DISCOUNT_AMOUNT, 0),
                      DISCOUNT_REFERENCE_BY = P_DISCOUNT_REFERENCE_BY,
                      FINALIZED_YN = 'Y',
                      UPDATE_BY = P_UPDATE_BY,
                      UPDATE_DATE = SYSDATE
                WHERE ORDER_ID = P_ORDER_ID;

               P_MESSAGE_CODE := '1111';
               P_MESSAGE := 'DATA  FINALIZED SUCCESSFULLY   !!!';
            EXCEPTION
               WHEN OTHERS
               THEN
                  P_MESSAGE := ' ERROR IN FINALIZE !!!';
                  P_MESSAGE_CODE := '0000';
                  ROLLBACK;
                  RETURN;
            END;

            --   ADD IN 29.09.2019
            BEGIN
               PRO_ITEM_ORDER_INGRE_SAVE (P_ORDER_ID,
                                          P_UPDATE_BY,
                                          V_MESSAGE,
                                          V_MESSAGE_CODE);

               IF V_MESSAGE_CODE <> '1111'
               THEN
                  P_MESSAGE_CODE := V_MESSAGE_CODE;
                  P_MESSAGE := V_MESSAGE;
                  ROLLBACK;
                  RETURN;
               END IF;
            END;
            
            
         END IF;
      ELSE
         P_MESSAGE_CODE := '0000';
         P_MESSAGE := 'NO DATA FOUND FOR FINALIZE !!';
         RETURN;
      END IF;
   ELSE
      P_MESSAGE_CODE := '0000';
      P_MESSAGE := 'ERROR OCCURED IN FINALIZE   !!!';
      RETURN;
   END IF;
END;
/






