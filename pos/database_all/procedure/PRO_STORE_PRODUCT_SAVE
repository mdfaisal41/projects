CREATE OR REPLACE PROCEDURE POS.PRO_STORE_PRODUCT_SAVE (
   P_INVENTORY_ID        IN     VARCHAR2,
   P_INVENTORY_TYPE_ID   IN     VARCHAR2,
   P_PRODUCT_ID          IN     VARCHAR2,
   P_QUANTITY            IN     VARCHAR2,
   P_UNIT_ID             IN     VARCHAR2,
   P_UNIT_PRICE          IN     VARCHAR2,
   P_PRICE               IN     VARCHAR2,
   P_ADVANCE_AMOUNT      IN     VARCHAR2,
   P_EMPLOYEE_ID         IN     VARCHAR2,
   P_UPDATE_BY           IN     VARCHAR2,
   P_SUPPLIER_ID         IN     VARCHAR2,
   P_MESSAGE                OUT VARCHAR2,
   P_MESSAGE_CODE           OUT VARCHAR2)
AS
   V_INVENTORY_ID     NUMBER;
   V_FRACTION         NUMBER;
   V_FINAL_PAY_YN     VARCHAR2 (10);
   V_ADVANCE_AMOUNT   NUMBER;
BEGIN
   BEGIN
      SELECT NVL (MAX (INVENTORY_ID), 0) + 1
        INTO V_INVENTORY_ID
        FROM INVENTORY_MASTER;

      IF P_UNIT_ID = 101
      THEN
         BEGIN
            V_FRACTION := P_QUANTITY * 1000;
         END;
      END IF;

      IF P_UNIT_ID = 103
      THEN
         BEGIN
            V_FRACTION := P_QUANTITY * 1000;
         END;
      END IF;


     <<CHECK_FINAL_PAY>>
      BEGIN
         IF P_INVENTORY_TYPE_ID = 206
         THEN
            IF P_PRICE < P_ADVANCE_AMOUNT
            THEN
               P_MESSAGE := 'ADVANCE AMOUNT EXCEED FROM TOTAL PRICE !!';
               P_MESSAGE_CODE := '0000';
               RETURN;
            ELSIF P_ADVANCE_AMOUNT = P_PRICE
            THEN
               V_ADVANCE_AMOUNT := P_ADVANCE_AMOUNT;
               V_FINAL_PAY_YN := 'Y';
            ELSIF P_ADVANCE_AMOUNT IS NULL
            THEN
               V_ADVANCE_AMOUNT := P_PRICE;
               V_FINAL_PAY_YN := 'Y';
            ELSE
               V_ADVANCE_AMOUNT := P_ADVANCE_AMOUNT;
               V_FINAL_PAY_YN := 'N';
            END IF;
         END IF;
      END CHECK_FINAL_PAY;

      IF P_INVENTORY_ID IS NOT NULL
      THEN
         BEGIN
            UPDATE INVENTORY_MASTER
               SET  INVENTORY_TYPE_ID = P_INVENTORY_TYPE_ID,
               PRODUCT_ID = P_PRODUCT_ID,
                   QUANTITY = P_QUANTITY,
                   UNIT_ID = P_UNIT_ID,
                   UNIT_PRICE = P_UNIT_PRICE,
                   PRICE = P_PRICE,
                   EMPLOYEE_ID = P_EMPLOYEE_ID,
                   UPDATE_BY = P_UPDATE_BY,
                   UPDATE_DATE = SYSDATE
             WHERE INVENTORY_ID = P_INVENTORY_ID;

            P_MESSAGE := 'PRODUCT UPDATED SUCCESSFULLY';
            P_MESSAGE_CODE := '1111';
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               P_MESSAGE :=
                  SQLERRM || ' ERROR UPDATING PRODUCT INFO RECORD!!!';
               P_MESSAGE_CODE := '0000';
               ROLLBACK;
               RETURN;
         END;
      ELSE
         BEGIN
            INSERT INTO INVENTORY_MASTER (INVENTORY_ID,
                                          INVENTORY_TYPE_ID,
                                          PRODUCT_ID,
                                          QUANTITY,
                                          UNIT_ID,
                                          UNIT_PRICE,
                                          PRICE,
                                          ADVANCE_AMOUNT,
                                          EMPLOYEE_ID,
                                          PROGRAM_YN,
                                          UPDATE_BY,
                                          UPDATE_DATE,
                                          INVENTORY_DATE,
                                          FINAL_PAY_YN,
                                          SUPPLIER_ID)
                 VALUES (V_INVENTORY_ID,
                         P_INVENTORY_TYPE_ID,
                         P_PRODUCT_ID,
                         P_QUANTITY,
                         P_UNIT_ID,
                         P_UNIT_PRICE,
                         P_PRICE,
                         V_ADVANCE_AMOUNT,
                         P_EMPLOYEE_ID,
                         'N',
                         P_UPDATE_BY,
                         SYSDATE,
                         SYSDATE,
                         V_FINAL_PAY_YN,
                         P_SUPPLIER_ID);

            --O_INVENTORY_DATE := TO_CHAR (SYSDATE, 'DD/MM/YYYY');
            P_MESSAGE := 'PRODUCT ADDED SUCCESSFULLY';
            P_MESSAGE_CODE := '1111';
         EXCEPTION
            WHEN OTHERS
            THEN
               P_MESSAGE := SQLERRM || ' ERROR SAVING PRODUCT INFO RECORD!!!';
               P_MESSAGE_CODE := '0000';
               ROLLBACK;
               RETURN;
         END;
      END IF;
   END;
END;
/